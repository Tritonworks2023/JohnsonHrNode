#!/usr/bin/env node

var app = require("../app");
var debug = require("debug")("salveo:server");
var http = require("http");
var https = require("https");
var fs = require("fs");

// Import Oracle configuration and connection functions
const {
  initializeOracleConnectionPool,
  initializeIOTOracleConnectionPool,
  enableOraclePoolStatistics,
} = require("../config/oracle");

// Import MongoDB connection function
const connectToMongoDB = require("../config/mongodb");

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

const sslCertificate = fs.readFileSync('/ssl2024/49b8b92fbdffbf67.crt');
const privateKey = fs.readFileSync('/ssl2024/johnsonliftsltd.com.key');
const certificateChain = fs.readFileSync('/ssl2024/gd_bundle-g2-g1.crt');

console.log("=============sslKey",sslCertificate);
console.log("=============privateKey",privateKey);
console.log("=============certificateChain",certificateChain);
const options = {
  cert: sslCertificate,
  key: privateKey,
  ca: certificateChain
};

// Create HTTP server.
//var server = http.createServer(app);

// Create HTTPS server.
 var server = https.createServer(options,app);

//var server = http.createServer(app);

// Connect to MongoDB first
connectToMongoDB()
  .then(() => {
    //Initialize main Oracle connection pool
   
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  })
  .catch((err) => {
    console.error("Error connecting to MongoDB:", err);
    process.exit(1);
  });


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("Server is listening on " + bind);
}
